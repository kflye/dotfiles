let mapleader=" "

" --- SET ---
set number relativenumber   " add line numbers (relative)

set ignorecase
set smartcase

set nohlsearch              " do not highlight search result
set incsearch               " incremental search, go to match before pressing enter

set scrolloff=8             " Minimal number of screen lines to keep above and below the cursor 

set ideajoin
set ideamarks
set idearefactormode=keep

set clipboard+=unnamed
set clipboard+=ideaput

set visualbell
set noerrorbells



" ----- PLUGINS -----

" https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b
"https://github.com/JetBrains/ideavim/wiki/NERDTree-support - remember shortcuts
Plug 'preservim/nerdtree'    "Plugin Section
                             
" Replace deleted/yanked text: gr{motion}
" Plug 'vim-scripts/ReplaceWithRegister'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

Plug 'machakann/vim-highlightedyank'
"let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"

Plug 'dbakker/vim-paragraph-motion'

set which-key
" let g:WhichKey_ShowVimActions = "true"

set notimeout


" ----- REMAPS -----
" remaps not used while coding starts with \
nmap \e :e ~/.ideavimrc<CR>
nmap \r <Action>(IdeaVim.ReloadVimRc.reload)

nnoremap x "_x

nmap zo <Action>(ExpandRegion)
nmap zc <Action>(CollapseRegion)
nmap za <Action>(ExpandCollapseToggleAction)

xmap <leader>p \"_dP

" Move line up/down
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Search and replace
nnoremap <Leader><Leader>r :%s//g<Left><Left>



" ----- Window navigation -----
nmap <c-l> <Action>(NextSplitter)
nmap <c-h> <Action>(PrevSplitter)
nmap <c-j> <Action>(NextSplitter)
nmap <c-k> <Action>(PrevSplitter)
nmap <s-l> <Action>(NextTab)
nmap <s-h> <Action>(PreviousTab)
nmap <s-right> <Action>(NextTab)
nmap <s-left> <Action>(PreviousTab)



" ----- Window management -----
nmap <a-t> <Action>(StretchSplitToTop)
nmap <a-s> <Action>(StretchSplitToBottom)
nmap <a-.> <Action>(StretchSplitToRight)
nmap <a-,> <Action>(StretchSplitToLeft)
nmap <c-w>= <Action>(MaximizeEditorInSplit)
nmap <c-w>\| <Action>(MaximizeEditorInSplit)

nmap <c-w>q <Action>(CloseAllEditors)
nmap <c-w>v <Action>(MoveTabRight)
nmap <c-w>s <Action>(MoveTabDown)
nmap <leader>wm <Action>(MoveEditorToOppositeTabGroup)

nmap <leader>bd <Action>(CloseContent)
nmap <leader>qa <Action>(CloseAllEditorsButActive)



" ----- Workspace / Explorer -----
let g:WhichKeyDesc_windows = "<leader>w Workspace / Explorer"
nmap <leader>wt <Action>(ActivateProjectToolWindow)
nmap <leader>wf <Action>(ActivateProjectToolWindow)
nmap <leader>ww <Action>(HideAllWindows)
nmap <leader>wz <Action>(ToggleZenMode)
nmap <leader>wd <Action>(ToggleDistractionFreeMode)
nmap <leader>wu <Action>(ActivateUnitTestsToolWindow)
nmap <leader>wr <Action>(ActivateRunToolWindow)
nmap <leader>wT <Action>(ActivateTerminalToolWindow)

if &ide =~? 'intellij idea'
    nmap <leader>ws <Action>(SelectInProjectView)
    nmap <leader>wn <Action>(ActivateNuGetToolWindow) " TODO: gradle package search?
elseif &ide =~? 'rider'
    nmap <leader>ws <Action>(LocateInSolutionView)
    nmap <leader>wn <Action>(ActivateNuGetToolWindow)
    nmap <leader>wh <Action>(HideSideWindows)
endif



" ----- Diagnostics -----
let g:WhichKeyDesc_diag = "<leader>x Diagnostics / Errors"
nmap <leader>xx <Action>(ActivateProblemsViewToolWindow)
nmap <leader>ce <Action>(ShowErrorDescription)
nmap [d <Action>(GotoPreviousError)
nmap ]d <Action>(GotoNextError)


if &ide =~? 'intellij idea'
elseif &ide =~? 'rider'
    nmap <leader>xw <Action>(Rider.ProblemsView.ErrorsInSolution)
    nmap <leader>ge <Action>(ReSharperGotoNextErrorInSolution)
    nmap <leader>gE <Action>(ReSharperGotoPrevErrorInSolution)
endif



" ----- Test / Debug -----
let g:WhichKeyDesc_test = "<leader>t Test / Debug"
nmap <leader>tb <Action>(ToggleLineBreakpoint)
nmap <leader>tS <Action>(Stop)
nmap <leader>rS <Action>(Stop)
if &ide =~? 'intellij idea'
    nmap <leader>tr <Action>(RunClass)
    nmap <leader>td <Action>(DebugClass)
elseif &ide =~? 'rider'
    nmap <leader>tr <Action>(RiderUnitTestRunContextAction)
    nmap <leader>td <Action>(RiderUnitTestDebugContextAction)
    nmap <leader>tF <Action>(RiderUnitTestRunSolutionAction)
    nmap <leader>te <Action>(RiderUnitTestSessionRerunFailedTestsAction)
endif



" ----- Run -----
let g:WhichKeyDesc_test = "<leader>r Run / Debug"
nmap <leader>rc <Action>(ChooseRunConfiguration)
nmap <leader>ru <Action>(Run)
nmap <leader>ra <Action>(Rerun)
nmap <leader>rd <Action>(Debug)



" ----- Search -----
let g:WhichKeyDesc_search = "<leader>s Search"
nmap <leader>se :action SearchEverywhere<CR>
nmap <leader>sf <Action>(GotoFile)
nmap <leader>sb <Action>(RecentFiles)
map <leader>sw <Action>(EditorSelectWord)
nmap <leader>sg <Action>(FindInPath)
xmap <leader>sg <Action>(FindInPath)
nmap <leader>sds <Action>(FileStructurePopup)
nmap <leader>sl <Action>(RecentLocations)

nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)



" ----- Completion / snippets -----
imap <c-y> <Action>(EditorChooseLookupItem)
" nmap <c-y> <Action>(EditorChooseLookupItem) " TODO: Overlaps with move page one line down in normal mode
imap <c-l> <Action>(NextTemplateVariable)
imap <c-h> <Action>(PreviousTemplateVariable)



" ----- LSP -----
nmap gd <Action>(GotoDeclaration)
nmap gi <Action>(GotoImplementation)
nmap go <Action>(GotoTypeDeclaration)
nmap gr <Action>(ShowUsages)

nmap K <Action>(QuickJavaDoc)
nmap <C-A-k> <Action>(ParameterInfo)
imap <C-A-k> <Action>(ParameterInfo)

nmap <leader>gl <Action>(GotoRelated)

let g:WhichKeyDesc_code = "<leader>c Code"
nmap <leader>cr :action RenameElement<CR>
nmap <leader>ca :action ShowIntentionActions<CR>
vmap <leader>ca :action ShowIntentionActions<CR>
nmap <leader>cR :action Refactorings.QuickListPopupAction<CR>
let g:WhichKeyDesc_code_introduce = "<leader>ci Introduce(Variable/Field/Parameter)"
nmap <leader>civ <Action>(IntroduceVariable)
nmap <leader>cif <Action>(IntroduceField)
nmap <leader>cip <Action>(IntroduceParameter)

nmap <leader>= <Action>(ReformatCode)

nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)
" TODO: Find mapping in treesitter - Move element left/right -> MoveElementLeft
nmap <leader>ml <Action>(MoveElementRight)
nmap <leader>mh <Action>(MoveElementLeft)

map <leader>oi <Action>(OptimizeImports)


if &ide =~? 'intellij idea'

nmap <leader>bs <Action>(CompileDirty)
nmap <leader>ba <Action>(CompileProject)

elseif &ide =~? 'rider'

" BuildWholeSolutionAction
nmap <leader>bs <Action>(BuildWholeSolutionAction)
nmap <leader>ba <Action>(RebuildSolutionAction)

endif


nmap <leader>ac <Action>(copilot.chat.show)




if &ide =~? 'intellij idea'
elseif &ide =~? 'rider'
endif
